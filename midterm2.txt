// Note: This assumes that the memo array is persistent throughout the recursive calls, like if it was a pointer in C. This also assumes that memo begins filled with zeros
function Lucas_top_down(int N, array memo){
// Base cases:
  if N == 0 then
    return 2
  else if N == 1 then
    return 1

// Recursion:
  if memo[N] == 0 then // If we need to actually calculate Lucas(N)
    memo[N] = Lucas_top_down(N-1, memo) + Lucas_top_down(N-2, memo)
  return memo[N]
}

function Lucas_bottom_up(int N){
  lucas = [] // Empty list to store values
  for i in range (1, N+1)
  // Base cases:
    if i == 0 then
      l = 2
    else if i == 1 then
      l = 1
    else
      l = lucas[i-1]+lucas[i-2]
    lucas[i] = l
  return lucas[N]
}
